name: Build

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarQube Cloud
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Hacer checkout del c칩digo
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # Paso 2: Ejecutar el an치lisis de SonarCloud
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: './project'  # Indicar la ruta de la carpeta donde est치 el archivo sonar-project.properties

      # Paso 3: Subir el archivo SARIF a GitHub Code Scanning
      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: './informes/sonarqube/sonar-report.sarif'  # Ruta del archivo SARIF generado por SonarCloud

      # Paso 4: Configurar Git para GitHub Pages
      - name: Configure Git for GitHub Pages
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      # Paso 5: Publicar el reporte SARIF en la rama gh-pages
      - name: Publish SARIF report to GitHub Pages
        run: |
          git fetch origin gh-pages  # Fetch de la rama gh-pages
          git checkout gh-pages || git checkout --orphan gh-pages  # Si no existe, crea una nueva rama
          cp ./informes/sonarqube/sonar-report.sarif sonar-report.sarif  # Copiar el reporte SARIF
          git add sonar-report.sarif  # A침adir el archivo SARIF a la rama gh-pages
          git commit -m "Publishing SonarCloud SARIF report" || echo "No changes to commit"  # Si no hay cambios, no hacer commit
          git push origin gh-pages  # Subir los cambios a la rama gh-pages
