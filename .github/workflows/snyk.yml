name: Snyk Security Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  snyk:
    name: Snyk Security Scan
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Hacer checkout del c칩digo
      - name: Checkout Code
        uses: actions/checkout@v4

      # Paso 2: Instalar Snyk CLI
      - name: Install Snyk CLI
        run: npm install -g snyk snyk-to-html

      # Paso 3: Autenticarse en Snyk (es necesario configurar el token de Snyk como un secreto)
      - name: Authenticate with Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth $SNYK_TOKEN

      # Paso 4: Instalar dependencias de Composer (si es un proyecto PHP)
      - name: Install PHP dependencies
        run: |
          cd project  # Cambiar al directorio correcto del proyecto
          composer install  # Instalar las dependencias definidas en composer.json

      # Paso 5: Ejecutar el an치lisis de Snyk para detectar vulnerabilidades en las dependencias dentro de la carpeta 'project'
      - name: Run Snyk Test
        run: snyk test --file=project/composer.lock --json > project/informes/snyk/report.json  # Ejecutar el an치lisis y guardar el resultado en formato JSON

      # Paso 6: Exportar los resultados de Snyk en formato SARIF
      - name: Export Snyk Results in SARIF format
        run: snyk-to-html -i project/informes/snyk/report.json -o project/informes/snyk/report.sarif  # Convertir JSON a SARIF para GitHub Code Scanning

      # Paso 7: Verificar que el archivo SARIF fue generado correctamente
      - name: List files in 'project/informes/snyk'
        run: ls -alh project/informes/snyk  # Verificar si 'report.sarif' est치 presente

      # Paso 8: Subir el archivo SARIF a GitHub Code Scanning
      - name: Upload SARIF result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: project/informes/snyk/report.sarif  # Subir el archivo SARIF generado
